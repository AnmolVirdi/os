package:
  name: yamale
  version: "6.0.0"
  epoch: 0
  description: "A schema and validator for YAML."
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - py${{vars.py-version}}-pyyaml

vars:
  pypi-package: yamale
  import: yamale

data:
  - name: py-versions
    items:
      3.10: '310'
      3.11: '311'
      3.12: '312'
      3.13: '313'

environment:
  contents:
    packages:
      - py3-supported-build-base-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/23andMe/Yamale
      tag: ${{package.version}}
      expected-commit: c989fabfb2813885c5355f5f8bbf06ca02847e40

  - uses: py/pip-build-install

  - uses: strip

update:
  enabled: true
  github:
    identifier: 23andMe/Yamale
    strip-prefix: v

test:
  environment:
    contents:
      packages:
        - py${{vars.py-version}}-ruamel-yaml
        - python3
  pipeline:
    - name: "Version and help flag test"
      runs: |
        yamale --version
        yamale --help
    - name: "Functional tests on samples"
      runs: |
        # Schema file
        cat <<EOF > schema.yaml
        name: str()
        age: int(min=0)
        extra_field: str(required=False)
        EOF
        # Valid data
        cat <<EOF > valid.yaml
        name: Alice
        age: 30
        extra_field: something
        EOF
        # Invalid data (age < 0)
        cat <<EOF > invalid.yaml
        name: Bob
        age: -5
        EOF
        # Second valid file
        cat <<EOF > valid_p2.yaml
        name: Charlie
        age: 40
        EOF
        # Test yamale
        yamale -s schema.yaml valid.yaml | grep -q "Validation success"
        yamale -s schema.yaml invalid.yaml | grep -q "Validation failed"
        yamale -s schema.yaml . --exclude "invalid.yaml" --cpu-num 1  --no-strict --verbose | grep -q "Validation success"
        # Testing with ruamel parser instead of pyyaml(default)
        yamale -s schema.yaml valid.yaml --parser ruamel
    - name: "Python Import test"
      runs: |
        cat << EOF > yamale_test.py
        import yamale
        import sys
        # Load the schema and data
        schema = yamale.make_schema('schema.yaml')
        data = yamale.make_data('valid.yaml')
        # Validate
        try:
            yamale.validate(schema, data)
            print("Validation success")
        except yamale.YamaleError as e:
            print("Validation failed!")
            print(e)
            sys.exit(1)
        EOF
        python yamale_test.py
